{"version":3,"sources":["components/button-group.tsx","app/calculatorSlice.ts","app/calculatorUtils.ts","components/number-buttons.tsx","components/top-actions-row-buttons.tsx","components/bottom-row-buttons.tsx","components/operator-buttons.tsx","components/calculator-screen.tsx","App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["props","dispatch","useDispatch","update","clicked","values","map","value","index","Button","key","variant","onClick","className","calc","operator","op1","op2","result","Math","trunc","pow","slice","createSlice","name","initialState","displayValue","currentOperator","bufferValue","startNext","previousOperator","reducers","updateDisplay","state","action","payload","includes","toString","concat","updateOperation","parseFloat","handleOperation","modifyDisplay","actions","selectDisplayValue","calculator","selectCurrentOperator","selectBufferValue","chunkArray","array","chunckSize","length","push","splice","NumberButtons","numbers","Array","from","_","i","reverse","TopActionsButtons","BottomRowButtons","OperatorButtons","useSelector","display","active","undefined","CalculatorScreen","screenDisplay","bufferDisplay","App","fluid","Container","Boolean","window","location","hostname","match","configureStore","reducer","calculatorReducer","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71d1623c.chunk.js","sourcesContent":["import * as React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {useDispatch} from \"react-redux\";\n\ninterface ButtonGroupProps {\n    values: Array<number | string>\n    clicked: any\n    variant: string\n}\n\nexport default (props: ButtonGroupProps) => {\n    const dispatch = useDispatch()\n    const update = props.clicked\n    return (\n        <>\n            {\n                (props.values).map(\n                    (value, index) => (\n                        <Button\n                            key={index}\n                            variant={props.variant}\n                            onClick={() => dispatch(update(value))}\n                            className={\"btn-lg my-2 mx-1 flex-fill\"}>\n                            {value}\n                        </Button>\n                    )\n                )\n            }\n        </>\n    )\n}\n\n\n\n","import {createSlice} from \"@reduxjs/toolkit\";\nimport CalculatorUtils from \"./calculatorUtils\";\n\nconst calc: CalculatorUtils = new CalculatorUtils()\n\ninterface ICalculatorSliceState {\n    displayValue: string,\n    currentOperator: string,\n    bufferValue: number,\n    startNext: boolean,\n    previousOperator: string,\n}\n\nconst initialState: ICalculatorSliceState = {\n    displayValue: \"0\",\n    currentOperator: \"\",\n    bufferValue: 0,\n    startNext: true,\n    previousOperator: \"\"\n}\n\nexport const slice = createSlice({\n    name: 'calculator',\n    initialState,\n    reducers: {\n        updateDisplay: (state, action) => {\n            // We need to handle decimals separately\n            if (action.payload === \".\") {\n                if (state.displayValue.includes(\".\")) {\n                    return\n                }\n            }\n\n            if (state.startNext) {\n                state.displayValue = action.payload.toString()\n                state.startNext = false\n            } else {\n                state.displayValue = state.displayValue === \"0\" ? action.payload.toString() :\n                    state.displayValue.concat(action.payload)\n            }\n        },\n\n        updateOperation: (state:ICalculatorSliceState, action) => {\n            state.previousOperator = state.currentOperator\n            state.currentOperator = action.payload === \"=\" ? \"\" : action.payload\n\n            if (state.previousOperator !== \"\") {\n                const op1 = state.bufferValue\n                const op2 = parseFloat(state.displayValue)\n                const operator = state.previousOperator\n                const result = calc.handleOperation(operator, op1, op2)\n                // Put the result on the screen and reset stack\n                state.displayValue = result.toString()\n                state.bufferValue = result\n                state.previousOperator = state.currentOperator\n            } else {\n                state.bufferValue = parseFloat(state.displayValue)\n            }\n            state.startNext = true\n\n        },\n        modifyDisplay: (state:ICalculatorSliceState, action) => {\n            if (action.payload === \"C\"){\n                state.displayValue = \"0\"\n            }\n            else if (action.payload === \"CE\"){\n                state.displayValue = \"0\"\n                state.bufferValue = 0\n                state.currentOperator = \"\"\n            }\n            else if (action.payload === \"\\uFE6A\"){\n                state.displayValue = (parseFloat(state.displayValue)/100).toString()\n            }\n        }\n    }\n})\n\nexport const {updateDisplay, updateOperation, modifyDisplay} = slice.actions\nexport const selectDisplayValue = (state: any) => state.calculator.displayValue\nexport const selectCurrentOperator = (state: any) => state.calculator.currentOperator\nexport const selectBufferValue = (state: any) => state.calculator.bufferValue\nexport default slice.reducer","export default class CalculatorUtils{\n    handleOperation(operator: string, op1: number, op2: number) {\n        let result: number = 0\n        switch (operator) {\n            case \"+\":\n                result = op1 + op2\n                break\n\n            case \"-\":\n                result = op1 - op2\n                break\n\n            case \"*\":\n                result = op1 * op2\n                break\n\n            case \"/\":\n                result = op1 / op2\n\n        }\n        // We want to limit answers to 10 decimal places at most\n        const digits = 10\n        result = Math.trunc(result * Math.pow(10, digits))/Math.pow(10, digits)\n        return result\n    }\n}","import * as React from \"react\";\nimport ButtonGroup from \"./button-group\";\nimport {updateDisplay} from \"../app/calculatorSlice\"\n\nconst NumberButtons = () => {\n    const numbers = chunkArray(Array.from({length: 9}, (_, i) => i + 1).reverse(), 3)\n    return (\n        <>\n            {\n                numbers.map((values, index) => (\n                        <div key={`${values}-${index}`} className={\"d-flex\"}>\n                            <ButtonGroup values={values.reverse()} clicked={updateDisplay} variant={\"primary\"}/>\n                        </div>\n                    )\n                )\n            }\n        </>\n    )\n}\n\nconst chunkArray = (array: Array<any>, chunckSize: number) => {\n    let result: Array<any> = []\n\n    while (array.length) {\n        result.push(array.splice(0, chunckSize))\n    }\n\n    return result\n}\n\nexport default NumberButtons\n","import * as React from \"react\";\nimport ButtonGroup from \"./button-group\";\nimport {modifyDisplay} from \"../app/calculatorSlice\"\n\nconst TopActionsButtons = () => {\n    const values = [\"C\", \"CE\", \"\\uFE6A\"]\n    return (\n        <div className={\"d-flex\"}>\n            <ButtonGroup values={values} clicked={modifyDisplay} variant={\"action\"}/>\n        </div>\n    )\n}\n\nexport default TopActionsButtons\n","import * as React from \"react\";\nimport Button from \"react-bootstrap/cjs/Button\";\nimport {updateDisplay} from \"../app/calculatorSlice\"\nimport {useDispatch} from \"react-redux\";\n\nconst BottomRowButtons = () => {\n    const values = [0, \".\"]\n    const dispatch = useDispatch()\n    const buttonClass = \"normal\"\n    return (\n        <div className={\"d-flex\"}>\n            <Button className={`flex-grow-1 btn-lg my-2 mx-1 btn-${buttonClass}`} onClick={() => dispatch(updateDisplay(values[0]))}>\n                {values[0]}\n            </Button>\n            <Button className={`btn-lg my-2 mx-1 btn-point-lg btn-${buttonClass}`} onClick={() => dispatch(updateDisplay(values[1]))}>\n                {values[1]}\n            </Button>\n        </div>\n    )\n}\n\nexport default BottomRowButtons","import * as React from \"react\";\nimport Button from \"react-bootstrap/cjs/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {updateOperation, selectCurrentOperator} from \"../app/calculatorSlice\"\n\nconst OperatorButtons = () => {\n    const operators = [\n        {name: \"divide\", value: \"/\", display: \"\\u00F7\"},\n        {name: \"multiply\", value: \"*\", display: \"\\u2715\"},\n        {name: \"subtract\", value: \"-\", display: \"\\u2212\"},\n        {name: \"add\", value: \"+\", display: \"\\u002B\"},\n    ]\n    const dispatch = useDispatch()\n    const currentOperator = useSelector(selectCurrentOperator)\n    return (\n        <div className={\"d-flex flex-column\"}>\n            {\n                operators.map((operator, index) => (\n                    <Button\n                        className={\"btn-lg m-2\"}\n                        variant={\"secondary\"}\n                        active={currentOperator === operator.value ? true : undefined}\n                        value={operator.value}\n                        key={index}\n                        name={operator.name}\n                        onClick={() => dispatch(updateOperation(operator.value))}>\n                        {operator.display}\n                    </Button>\n                ))\n            }\n            <Button\n                className={\"btn-lg m-2\"}\n                name={\"equals\"}\n                variant={\"equals\"}\n                onClick={() => dispatch(updateOperation(\"=\"))}\n            >\n                {\"\\u003D\"}\n            </Button>\n        </div>\n    )\n}\n\nexport default OperatorButtons\n\n","import * as React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {selectDisplayValue, selectBufferValue} from \"../app/calculatorSlice\"\n\nconst CalculatorScreen = () => {\n\n    const screenDisplay = useSelector(selectDisplayValue)\n    const bufferDisplay = useSelector(selectBufferValue)\n    return (\n        <div className={\"calc-screen\"}>\n            <div className={\"buffer-display\"}>\n                {bufferDisplay}\n            </div>\n            <div className={\"w-100 main-display\"}>\n                {screenDisplay}\n            </div>\n        </div>\n    )\n}\n\nexport default CalculatorScreen","import React from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport \"./styles/theme.scss\"\nimport NumberButtons from './components/number-buttons';\nimport TopActionsButtons from \"./components/top-actions-row-buttons\";\nimport Col from \"react-bootstrap/cjs/Col\";\nimport Row from \"react-bootstrap/cjs/Row\";\nimport BottomRowButtons from \"./components/bottom-row-buttons\";\nimport OperationsButtons from \"./components/operator-buttons\";\nimport CalculatorScreen from './components/calculator-screen';\nimport Jumbotron from \"react-bootstrap/cjs/Jumbotron\";\n\n\nconst App = () => {\n    return (\n        <>\n            <Jumbotron fluid className={\"header\"}>\n                <Container>\n                    <h1 className={\"text-center\"}>\n                        Nautilus Calculator\n                    </h1>\n                </Container>\n            </Jumbotron>\n            <Container>\n                <Row className={\"justify-content-center\"}>\n                    <Col className={\"mx-2 col-md-5 col-lg-4 calc-container shadow-lg\"}>\n                        <Row>\n                            <Col className={\"w-100 p-0\"}>\n                                <CalculatorScreen/>\n                            </Col>\n                        </Row>\n                        <Row className={\"px-1\"}>\n                            <Col className={\"p-0\"}>\n                                <TopActionsButtons/>\n                                <NumberButtons/>\n                                <BottomRowButtons/>\n                            </Col>\n                            <Col className={\"col-auto p-0\"}>\n                                <OperationsButtons/>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {configureStore} from \"@reduxjs/toolkit\";\nimport calculatorReducer from \"./calculatorSlice\"\n\nexport default configureStore({\n    reducer: {\n        calculator: calculatorReducer\n    }\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./app/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}